{"version":3,"sources":["components/Error.jsx","components/Formulario.jsx","components/imagen.jsx","components/ListadoImagenes.jsx","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Formulario","setBusqueda","useState","termino","setTermino","error","setError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImagenes","imagenes","map","key","id","App","busqueda","setImagenes","paginaactual","setPaginaActual","totalpaginas","setTotalPaginas","useEffect","a","imagenesPorPagina","url","fetch","respuesta","json","resultado","hits","calcularTotalPaginas","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","consultarAPI","onClick","nuevaPaginaActual","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7f49c748.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = ({ mensaje }) => {\n    return (\n        <p className=\"my-3 p-4 text-center alert alert-primary\">\n            {mensaje}\n        </p>\n    );\n}\n\nError.propTypes = {\n    mensaje: PropTypes.string.isRequired\n}\n\nexport default Error;","import React, { useState } from 'react';\nimport Error from './Error';\nimport PropTypes from 'prop-types';\n\nconst Formulario = ({ setBusqueda }) => {\n\n    //STATES\n    const [termino, setTermino] = useState('');\n    const [error, setError] = useState(false);\n\n    //HANDLE SUBMIT\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        //validar\n        if (termino.trim() === '') {\n            setError(true);\n            return;\n        }\n        setError(false);\n\n        // enviar el termino de busqueda hacia el componente principal\n        setBusqueda(termino);\n\n    }\n\n    return (\n        <form\n            onSubmit={handleSubmit}\n        >\n            <div className=\"row\">\n                <div className=\"form-group col-md-8\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control form-control-lg\"\n                        placeholder=\"Busca una imagen, ejemplo: futbol o café\"\n                        onChange={e => setTermino(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group col-md-4\">\n                    <input\n                        type=\"submit\"\n                        className=\"btn btn-lg btn-danger btn-block\"\n                        value=\"Buscar\"\n                    />\n                </div>\n            </div>\n            {error ? <Error mensaje=\"Agrega un término de busqueda\" /> : null}\n        </form>\n    );\n}\n\nFormulario.propTypes = {\n    setBusqueda: PropTypes.func.isRequired\n}\n\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Imagen = ({ imagen }) => {\n\n    // extraer las imagenes\n    const { largeImageURL, likes, previewURL, tags, views } = imagen;\n\n    return (\n        <>\n            <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\n                <div className=\"card\">\n                    <img src={previewURL} alt={tags} className=\"card-img-top\" />\n                    <div className=\"card-body\">\n                        <p className=\"card-text\">{likes} Me Gusta</p>\n                        <p className=\"card-text\">{views} Vistas</p>\n                    </div>\n                    <div className=\"card-footer\">\n                        <a\n                            href={largeImageURL}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className=\"btn btn-primary btn-block\"\n                        >Ver Imagen</a>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nImagen.propTypes = {\n    imagen: PropTypes.object.isRequired\n}\n\nexport default Imagen;","import React from 'react';\nimport Imagen from './imagen';\nimport PropTypes from 'prop-types';\n\nconst ListadoImagenes = ({ imagenes }) => {\n    return (\n        <>\n            <div className=\"col-12 p-5 row\">\n                {imagenes.map(imagen => (\n                    <Imagen\n                        key={imagen.id}\n                        imagen={imagen}\n                    />\n                ))}\n            </div>\n        </>\n    );\n}\n\nListadoImagenes.propTypes = {\n    imagenes: PropTypes.array.isRequired\n}\n\nexport default ListadoImagenes;","import React, { useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport ListadoImagenes from './components/ListadoImagenes';\n\nfunction App() {\n\n  //STATES\n  const [busqueda, setBusqueda] = useState('');\n  const [imagenes, setImagenes] = useState([]);\n  const [paginaactual, setPaginaActual] = useState(1);\n  const [totalpaginas, setTotalPaginas] = useState(1);\n\n  // USE EFFECT\n  useEffect(() => {\n\n    const consultarAPI = async () => {\n      if (busqueda === '') return;\n      const imagenesPorPagina = 30;\n      const keyApi = '18095170-10aeea23651e6f10ad51c35a7';\n      const url = `https://pixabay.com/api/?key=${keyApi}&q=${busqueda}&per_page=${imagenesPorPagina}&page=${paginaactual}`;\n      const respuesta = await fetch(url);\n      const resultado = await respuesta.json();\n      //console.log(resultado.hits);\n      setImagenes(resultado.hits);\n\n      //calcular el total de paginas\n      const calcularTotalPaginas = Math.ceil(resultado.totalHits / imagenesPorPagina);\n      setTotalPaginas(calcularTotalPaginas);\n\n      //mover la pantalla hacia arriba al cambiar de pagina. Jumbotron es la parte superior del proyecto\n      const jumbotron = document.querySelector('.jumbotron');\n      jumbotron.scrollIntoView({ behavior: 'smooth' });\n\n    }\n    consultarAPI();\n\n  }, [busqueda, paginaactual])\n\n  // Definir la pagina anterior\n  const paginaAnterior = () => {\n    const nuevaPaginaActual = paginaactual - 1;\n    if (nuevaPaginaActual === 0) return;\n    setPaginaActual(nuevaPaginaActual);\n  }\n\n  //Definir la pagina siguiente\n  const paginaSiguiente = () => {\n    const nuevaPaginaActual = paginaactual + 1;\n    if (nuevaPaginaActual > totalpaginas) return;\n    setPaginaActual(nuevaPaginaActual);\n  }\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"jumbotron\">\n          <p className=\"lead text-center\">Buscador de Imagenes</p>\n\n          <Formulario\n            setBusqueda={setBusqueda}\n          />\n        </div>\n        <div className=\"row justify-content-center\">\n          <ListadoImagenes\n            imagenes={imagenes}\n          />\n\n          {(paginaactual === 1) ? null : (\n            <button\n              type=\"button\"\n              className=\"bbtn btn-info mr-1 mb-5\"\n              onClick={paginaAnterior}\n            >&laquo; Anterior</button>\n          )}\n\n          {(paginaactual === totalpaginas) ? null : (\n            <button\n              type=\"button\"\n              className=\"bbtn btn-info mb-5\"\n              onClick={paginaSiguiente}\n            >Siguiente &raquo;</button>\n          )}\n\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\n/**\n *  ¿como definimos el total de paginas?\n * Tenemos 30 imagenes x pagina, entonces debemos saber el total de imagenes.\n * si tenemos 500 imagenes -> 500/30 son 16.6 paginas -> Math.ceil redondea hacia arriba\n */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}